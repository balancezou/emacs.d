# -*- mode: snippet -*-
# name: single
# key: single
# --

class NonCopyable {
protected:
     NonCopyable() = default;
     virtual ~NonCopyable() = default;
     NonCopyable(NonCopyable &&) = delete;                 // Move construct
     NonCopyable(const NonCopyable &) = delete;            // Copy construct
     NonCopyable &operator=(const NonCopyable &) = delete; // Copy assign
     NonCopyable &operator=(NonCopyable &&) = delete;      // Move assign
};


// Meyers' Singleton
template <typename T>
class Singleton : public NonCopyable {
public:
    static T & getInstance() {
      static T _instance {};
      return _instance;
    }
};


class $1 final : public Singleton<$1> {
    friend class Singleton<$1>;
protected:
    $1() = default;
    ~$1() override= default;

public:

};
